{
  "articles": [
    {
      "path": "index.html",
      "title": "Latent Stratification",
      "author": [],
      "contents": "\r\n\r\nContents\r\n1. Getting Started\r\n2. About the Package\r\n3.1 Data Preparation\r\n3.2 Estimating ATE Using Latent Stratification\r\n\r\n1. Getting Started\r\nTo install, devtools::install_github(\"eleafeit/latent_strat\")\r\nThis package is built from Berman & Feit (2019)\r\nCitation (APA): Berman, R., & Feit, E. M. (2019). Principal stratification for advertising experiments. The Wharton School Research Paper, Wharton Customer Analytics Initiative Research Paper.\r\n2. About the Package\r\nThis package contains the necessary functions of the latent stratification model from Berman & Feit (2019).In advertising experiments, noisy responses complicates the estimation of average treatment effect (ATE) and the assessment of the return of interest (ROI). Therefore, running normal t-tests will often yield estimates with high variance. The latent stratification model divides the customers into three strata: always buyer, who are positive under treatment and control (A); influenced buyer, who are positive only under treatment (B), and never buyer, who are zero under treatment and control (C). The model assumes that defiers, who are positive only under control, does not exist. It is able to improve the precision of the estimate by lowering the variance of the estimate. At the same time, it is also able to improve the accuracy by yielding an ATE closer to the true value.\r\n3.1 Data Preparation\r\nIn order to demonstrate the package, we first simulate the data via the sim_latent_strat() function. The number following the strata (A for always buyer, B for influenced buyer, and C for never buyer) indicates whether the subject receives treatment. In this case, if the number is 1, then it means that the subject has received treatment, and 0 otherwise. The function takes in the sample size (n), proportion of always buyer (piA), proportion of influenced buyer (piB), mean of always buyer who received treatment (muA1), mean of always buyers who are in control, mean of the influenced buyer who received treatment, and the variance of group A1, A0, and B1. We assume that the treatment proportion is 50%. The sim_latent_strat() function generates a list containing a data frame data, the ATE ATE, and a vector par.\r\n\r\n\r\nset.seed(20030601)\r\nsim <- sim_latent_strat(n=10000, piA=0.2, piB=0.1, muA1=5, muA0=4.5, muB1=3, sigma=0.3)\r\n\r\n\r\n\r\nThe input parameters are stored as the par vector. The data will be simulated from these true parameters. For example, 20% of all observations belongs to strata A, who are positive under treatment and control. Observations in strata A who received treatment have a mean outcome of 5, and those who are in control have a mean outcome of 4.5, both with a variance of 0.3.\r\n\r\n\r\nsim$par\r\n\r\n\r\n  piA   piB  muA1  muA0  muB1 sigma \r\n  0.2   0.1   5.0   4.5   3.0   0.3 \r\n\r\nThe true ATE can be calculated from these true parameters. In this example, the true ATE is 0.4.\r\n\r\n\r\nsim$ATE\r\n\r\n\r\n[1] 0.4\r\n\r\nLet’s now examine the simulated data.\r\n\r\n\r\nhead(sim$data)\r\n\r\n\r\n         y z s   sB   sC\r\n1 3.356879 1 B  1.1 -0.5\r\n2 0.000000 1 C  0.1  0.5\r\n3 0.000000 1 C  0.1  0.5\r\n4 0.000000 1 C  0.1  0.5\r\n5 3.167482 1 B  1.1 -0.5\r\n6 4.749002 1 A -0.9 -1.5\r\n\r\nThe data frame contains the 10000 randomly generated value (y) for each observation based on the strata (s; which can be A, always buyer; B, influenced buyer; or C, never buyer) and treatment (z; 1 for treatment, 0 for control). Since the treatment proportion is 50%, the first 5000 observations will have z = 1. For example, in the first entry, the subject belongs to strata B, who is an influenced buyer that only buys under treatment. Therefore, the subject in the first entry received treatment and has an outcome of 3.36. Following the same logic, the second entry is a subject in the never buyer strata. Therefore, even though he received treatment, his outcome is 0.\r\n3.2 Estimating ATE Using Latent Stratification\r\nTo estimate ATE using latent stratification, we simply call the mle_ls() function and input the data frame as a parameter.\r\n\r\n\r\ntest = mle_ls(sim$data)\r\n\r\n\r\nOptimization runs took 0.1 secs\r\nGreatest ll was achieved in run 1 at -7008.303 (worst was -7008.303 )\r\nComputing variance-covariance matrix took 0.1  secs\r\n\r\ntest$pars\r\n\r\n\r\n     par        est          se\r\n1    ATE  0.4032336 0.013019384\r\n2 expATE 13.6626614 0.401495726\r\n3    piA  0.2000032 0.004000203\r\n4    piB  0.1000800 0.004225939\r\n5   muA1  4.9938814 0.009284889\r\n6   muA0  4.4878030 0.009460486\r\n7   muB1  3.0177472 0.013298883\r\n8  sigma  0.2961601 0.004195862\r\n\r\nThe function returned the analysis result as a data frame. It includes the estimates and standard errors of ATE, strata proportions, strata outcome means, and variance. The latent stratification model provides an accurate estimate of the ATE. This can be seen by ATE estimate of 0.403. In addition, the estimate is also precise. The standard error of the estimate under the latent stratification model is only 0.013.\r\n\r\n\r\n\r\n",
      "last_modified": "2021-11-28T16:10:49-05:00"
    },
    {
      "path": "reference.html",
      "title": "LS Reference",
      "author": [],
      "contents": "\r\n\r\nContents\r\nATEd\r\nATEo\r\nbounds_ls\r\ngr_ll_ls\r\nhes_ll_ls\r\nll_ls\r\nls_vcv\r\nmle_ls\r\nsim_latent_strat\r\nstart_ls\r\nvarATEldelta\r\n\r\nATEd\r\nDescription  Difference in means estimate of the ATE Usage  ATEd(data) Arguments  data: data frame containing cols y (positive outcome with zeros) and z (treatment). Details  t.test() can be used as an alternative. Value  difference in means estimate of the ATE \r\nATEo\r\nDescription  Oracle model estimate of the ATE Usage  ATEo(data) Arguments  data: data frame containing cols y (positive outcome with zeros) and z (treatment). Need to include s as well. Details  This serves as a benchmark result under the ideal scenario where all strata are known. Often used to compare with other analysis results. Value  oracle estimate of ATE \r\nbounds_ls\r\nDescription  Computes parameter bounds to be used in L-BFGS-B mle optimization. Usage  bounds_ls(data) Arguments  data: data frame containing cols y (positive outcome with zeros) and z (treatment). Details  Each strata much have at least three observations. Value  The maximum and lowest possible values for segment proportions, mean, and variance. \r\ngr_ll_ls\r\nDescription  Computes the first order partial derivative of the log-likelihood for the latent stratification model, with respect to every variable in the vector par. Usage  gr_ll_ls(par, data, trans = FALSE) Arguments  par: vector c(piA, piB, muA1, muA0, muB1, sigma), c(piA, piB/(1-piA), muA1, muA0, muB1, sigma) if trans=TRUE.  data: data frame containing columns y (positive outcome with zeros) and z (treatment).  trans: boolean signifying if piB has been transformed. Details  Sometimes piB is transformed to relative proportions from absolute proportions. This transformation allows the reparameterization of the piA and piB to allow constraint bounds between 0 and 1 in the optimization procedure.  The output vector is named, each representing the gradient taken with respect to that variable in the parameter. Value  Gradient of the log-likilihood for the latent stratification model as a named vector. \r\nhes_ll_ls\r\nDescription  Computes the second order partial derivative with respect to each of the par variables, resulting in a Hessian matrix. Usage  hes_ll_ls(par, data, trans = FALSE) Arguments  par: vector c(piA, piB, muA1, muA0, muB1, sigma), c(piA, piB/(1-piA), muA1, muA0, muB1, sigma) if trans=TRUE.  data: data frame containing columns y (positive outcome with zeros) and z (treatment).  trans: boolean signifying if piB has been transformed. Details  Sometimes piB is transformed to relative proportions from absolute proportions. This transformation allows the reparameterization of the piA and piB to allow constraint bounds between 0 and 1 in the optimization procedure.  The returned Hessian is the second order derivative with respect to θ where θ is in the order (piA, piB, muA1, muA0, muB1, sigma). Value  Hessian matrix for the latent stratification model. \r\nll_ls\r\nDescription  Computes the log-likelihood for each of the four observational groups under the assumption of three strata and common variance. Usage  ll_ls(par, data, trans = FALSE) Arguments  par: vector c(piA, piB, muA1, muA0, muB1, sigma), c(piA, piB/(1-piA), muA1, muA0, muB1, sigma) if trans=TRUE.  data: data frame containing columns y (positive outcome with zeros) and z (treatment). trans: boolean signifying if piB has been transformed. Details  Sometimes piB is transformed to relative proportions from absolute proportions. This transformation allows the reparameterization of the piA and piB to allow constraint bounds between 0 and 1 in the optimization procedure.  The log likelihoods are calculated based on equation 11-14 in the paper. Note that the equations presented in the paper are for normal likelihood and for a single individual, thus corresponding adjustments have been made in the code to calculate the log likelihood for the group. Value  Log-likelihood for the latent stratification model. \r\nls_vcv\r\nDescription  Variance-Covariance Matrix Usage  ls_vcv(par, data, method) Arguments  par: vector c(piA, piB, muA1, muA0, muB1, sigma).  data: data frame containing cols y (positive outcome with zeros) and z (treatment).  method method used for computation: score, hessian, robust, and bootstrap. Details  Computes the variance-covariance matrix:  if method = “hessian” then the standard errors are computed by the numeric hessian  if method = “score” then standard errors are computed from the gradient  if method = “robust” then white robust standard errors are computed  if method = “bootstrap” then the standard errors are computed by bootstrap Value  the variance-covariance matrix based on the specified method. \r\nmle_ls\r\nDescription  Computes the maximum likelihood estimate for the latent stratification model, optionally takes starting values in original parameter space. Usage  mle_ls(data, start = NULL, starts = 1, vcv = “hessian”, quiet = FALSE) Arguments  data: data frame containing cols y (positive outcome with zeros) and z (treatment).  start: vector starting values for parameters c(piA, piB, muA1, muA0, muB1, sigma).  starts: number of starting values.  vcv: the variance-covariance matrix of the data, can be calculated using ls_vcv().  quiet: boolean controlling if the computation time should be printed after execution. Details  If starts=1, then the optimization is run once from the starting values. If starts>1, then mle optimization is done with multiple starting values, which are generated near the starting values.  The output is an ls model object, which can be called using summary() to show the ATE parameters, their standard errors, and the maximum likelihood. To access the variance-covariance matrix, use object$vcv. Value  object containing the MLE results. \r\nsim_latent_strat\r\nDescription  Simulates the data from the latent stratification model with three strata. Usage  sim_latent_strat( n = 1e+05, p = 0.5, piA = 0.05, piB = 0.1, muA1 = 5, muA0 = 4, muB1 = 5, sigma = 1 ) Arguments  n: total sample size, the default value is 100000.  p: treatment proportions, the default value is 0.5.  piA: proportion of strata A, the default value is 0.05.  piB: proportion of strata B, the default value is 0.10.  muA1: mean for strata A that received treatment, Z = 1, the default is 5.  muA0: mean for strata A that did not received treatment, Z = 0, the default value is 4.  muB1: mean for strata B that received treatment, Z = 1, the default value is 5.  sigma: variance for strata. Details  The three strata are defined as:  A = positive under treatment and control.  B = positive under treatment only.  C = never positive.  The model assumes that strata D, which are those who are positive under control only, does not exist. The model also assumes that all strata have the same variance. Value  A list containing a data frame, a numeric value, and two vectors.  The data frame data contains the outcome variable y, treatment dummy z, strata, and the mean-centered effects coded dummies for strata.  The numeric value ATE is the true average treatment effect.  The vector par consists of the true parameters of the simulated data. \r\nstart_ls\r\nDescription  Computes the starting values for proportion, mean, and variance for optimization. The proportions pi are transformed to relative sizes. Usage  start_ls(data, rand = FALSE) Arguments  data: data frame containing cols y (positive outcome with zeros) and z (treatment).  rand: boolean controlling whether random adjusted starting mean values are produced. Details  By allowing rand=TRUE, the optim() in mle_ls() can be started in multiple places, providing random adj values while remaining within reasonable bounds. Value  starting values used for maximum-likelihood optimization. \r\nvarATEldelta\r\nDescription  Estimates the standard error and the exponential of the standard error of ATE via the delta method. Usage  varATEldelta(par, vcv) Arguments  par: vector c(piA, piB, muA1, muA0, muB1, sigma).  vcv: variance-covariance matrix of the parameters, can be calculated using ls_vcv(). etails  The delta method estimates the variance by expanding the function of a random variable through Taylor approximation, which can be expanded to vectorized calculations. For a more detailed explanation, see https://www.stata.com/support/faqs/statistics/delta-method/. Value  standard error of the average treatment effect. \r\n\r\n\r\n\r\n",
      "last_modified": "2021-11-28T16:10:50-05:00"
    },
    {
      "path": "shiny.html",
      "title": "LS Calculator",
      "author": [],
      "contents": "\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
      "last_modified": "2021-11-28T16:10:51-05:00"
    },
    {
      "path": "vignette.html",
      "title": "LS Vignette",
      "author": [],
      "contents": "\r\n\r\nContents\r\n1. Verision 0.1.0 Overview\r\n2. Introduction\r\n3. Latent Stratification Model\r\n3.1 Data Preparation\r\n3.2 Estimating ATE Using t-Test\r\n3.3 Estimating ATE Using Latent Stratification\r\n3.4 Estimating ATE Using the Oracle Model\r\n4.1 Helper Function\r\n4.2 Variance-Covariance Matrix\r\n\r\n1. Verision 0.1.0 Overview\r\nFirst version of the package\r\nTo install, devtools::install_github(“eleafeit/latent_strat”)\r\nIn future versions: upgrade code efficiency\r\n2. Introduction\r\nThis package contains the necessary functions of the latent stratification model, which can be used in advertising experiments. This vignette will explain the usage of these functions and provide interpretations to the output.\r\nIf you are unfamiliar with the concept, Berman & Feit (2019) offers detailed descriptions for the latent stratification model.\r\n3. Latent Stratification Model\r\nIn advertising experiments, noisy responses complicates the estimation of average treatment effect (ATE) and the assessment of the return of interest (ROI). Therefore, running normal t-tests will often yield estimates with high variance. The latent stratification model divides the customers into three strata: always buyer, who are positive under treatment and control (A); influenced buyer, who are positive only under treatment (B), and never buyer, who are zero under treatment and control (C). The model assumes that defiers, who are positive only under control, does not exist. It is able to improve the precision of the estimate by lowering the variance of the estimate. At the same time, it is also able to improve the accuracy by yielding an ATE closer to the true value.\r\n3.1 Data Preparation\r\nIn order to demonstrate the package, we first simulate the data via the sim_latent_strat() function. The number following the strata (A for always buyer, B for influenced buyer, and C for never buyer) indicates whether the subject receives treatment. In this case, if the number is 1, then it means that the subject has received treatment, and 0 otherwise. The function takes in the sample size (n), proportion of always buyer (piA), proportion of influenced buyer (piB), mean of always buyer who received treatment (muA1), mean of always buyers who are in control, mean of the influenced buyer who received treatment, and the variance of group A1, A0, and B1. We assume that the treatment proportion is 50%. The sim_latent_strat() function generates a list containing a data frame data, the ATE ATE, and a vector par.\r\n\r\n\r\nset.seed(20030601)\r\nsim <- sim_latent_strat(n=10000, piA=0.2, piB=0.1, muA1=5, muA0=4.5, muB1=3, sigma=0.3)\r\n\r\n\r\n\r\nThe input parameters are stored as the par vector. The data will be simulated from these true parameters. For example, 20% of all observations belongs to strata A, who are positive under treatment and control. Observations in strata A who received treatment have a mean outcome of 5, and those who are in control have a mean outcome of 4.5, both with a variance of 0.3.\r\n\r\n\r\nsim$par\r\n\r\n\r\n  piA   piB  muA1  muA0  muB1 sigma \r\n  0.2   0.1   5.0   4.5   3.0   0.3 \r\n\r\nThe true ATE can be calculated from these true parameters. In this example, the true ATE is 0.4.\r\n\r\n\r\nsim$ATE\r\n\r\n\r\n[1] 0.4\r\n\r\nLet’s now examine the simulated data.\r\n\r\n\r\nhead(sim$data)\r\n\r\n\r\n         y z s   sB   sC\r\n1 3.356879 1 B  1.1 -0.5\r\n2 0.000000 1 C  0.1  0.5\r\n3 0.000000 1 C  0.1  0.5\r\n4 0.000000 1 C  0.1  0.5\r\n5 3.167482 1 B  1.1 -0.5\r\n6 4.749002 1 A -0.9 -1.5\r\n\r\nThe data frame contains the 10000 randomly generated value (y) for each observation based on the strata (s; which can be A, always buyer; B, influenced buyer; or C, never buyer) and treatment (z; 1 for treatment, 0 for control). Since the treatment proportion is 50%, the first 5000 observations will have z = 1. For example, in the first entry, the subject belongs to strata B, who is an influenced buyer that only buys under treatment. Therefore, the subject in the first entry received treatment and has an outcome of 3.36. Following the same logic, the second entry is a subject in the never buyer strata. Therefore, even though he received treatment, his outcome is 0.\r\n3.2 Estimating ATE Using t-Test\r\nOne of the most popular and straight-forward ways of estimating the ATE is done by the t.test() function in base R. In the code below, we separate the outcome into two groups based on whether the observation has received treatment (z=1, or not z=0), then carry out a t-test with the null hypothesis that the difference in means is zero.\r\n\r\n\r\ndata = sim$data\r\nttest = t.test(data$y[data$z==1], data$y[data$z==0])\r\nttest\r\n\r\n\r\n\r\n    Welch Two Sample t-test\r\n\r\ndata:  data$y[data$z == 1] and data$y[data$z == 0]\r\nt = 11.375, df = 9789.5, p-value < 2.2e-16\r\nalternative hypothesis: true difference in means is not equal to 0\r\n95 percent confidence interval:\r\n 0.3639820 0.5155492\r\nsample estimates:\r\nmean of x mean of y \r\n1.3193750 0.8796094 \r\n\r\nThe difference in mean of the two groups can be found by subtracting mean of x and mean of y, which is 1.319 - 0.880 = 0.439. The confidence interval is (0.364, 0.516). With the p-value being less than 2.2e-16, the null hypothesis can be rejected.\r\nAlthough the standard output shows the accuracy of ATE, it doesn’t have information about its precision. So call stderr of the t-test object. We can also compute the standard error from the confidence interval: divide half of the difference between the upper and the lower bound by 1.96. As shown below, the standard error of the mean is 0.0387.\r\n\r\n\r\nttest$stderr\r\n\r\n\r\n[1] 0.03866101\r\n\r\n3.3 Estimating ATE Using Latent Stratification\r\nThe alternative method described in Berman & Feit (2019) is to use the latent stratification model of this package. We simply call the mle_ls() function and input the data frame as a parameter.\r\n\r\n\r\ntest = mle_ls(sim$data)\r\n\r\n\r\nOptimization runs took 0.1 secs\r\nGreatest ll was achieved in run 1 at -7008.303 (worst was -7008.303 )\r\nComputing variance-covariance matrix took 0.1  secs\r\n\r\ntest$pars\r\n\r\n\r\n     par        est          se\r\n1    ATE  0.4032336 0.013019384\r\n2 expATE 13.6626614 0.401495726\r\n3    piA  0.2000032 0.004000203\r\n4    piB  0.1000800 0.004225939\r\n5   muA1  4.9938814 0.009284889\r\n6   muA0  4.4878030 0.009460486\r\n7   muB1  3.0177472 0.013298883\r\n8  sigma  0.2961601 0.004195862\r\n\r\nThe function returned the analysis result as a data frame. It includes the estimates and standard errors of ATE, strata proportions, strata outcome means, and variance. The latent stratification model provides a more accurate estimate of the ATE. This can be seen by ATE estimate of 0.403, compared to 0.439 in the t-test. In addition, the estimate is also more precise. The standard error of the estimate under the latent stratification model is 0.013, about 66% smaller than that under the t-test (0.039).\r\n3.4 Estimating ATE Using the Oracle Model\r\nBy the way, if we actually know the strata, we can compute ATE with the ATEo() function, which will produce an even better response. As shown below, the ATE is 0.4030, even smaller than the 0.4032 ATE estimated using the latent stratification model.\r\n\r\n\r\nATEo(data)\r\n\r\n\r\n[1] 0.4030454\r\n\r\n4.1 Helper Function\r\nThis package is designed such that the only function that basic users need is the mle_ls() function. However, the mle_ls() function incorporates many helper functions that can be useful to high-end users. The most notable is the ls_vcv() function that is used to calculate the variance co-variance matrix.\r\n4.2 Variance-Covariance Matrix\r\nIn the mle optimization, the ls_vcv() function is used in another function called varATEdelta(), which estimates the standard error of the output via the delta method as stated in White (1982). Aside from this use, you can also use the variance-covariance matrix from the ls_vcv() function to find the correlation between parameters. All you need to do is to plug the variance-covariance matrix to the cov2cor() function in base R.\r\n\r\n\r\nvcv = ls_vcv(sim$par, sim$data, \"hessian\")\r\ncov2cor(vcv)\r\n\r\n\r\n              [,1]          [,2]          [,3]          [,4]\r\n[1,]  1.000000e+00 -0.1185490296 -0.0006384165  1.306327e-05\r\n[2,] -1.185490e-01  1.0000000000  0.0011386816 -2.329970e-05\r\n[3,] -6.384165e-04  0.0011386816  1.0000000000  6.220982e-04\r\n[4,]  1.306327e-05 -0.0000232997  0.0006220982  1.000000e+00\r\n[5,] -7.784093e-04  0.0013883732  0.0027311290 -1.447990e-03\r\n[6,]  3.553173e-04 -0.0006337451  0.0169208944  3.676509e-02\r\n              [,5]          [,6]\r\n[1,] -0.0007784093  0.0003553173\r\n[2,]  0.0013883732 -0.0006337451\r\n[3,]  0.0027311290  0.0169208944\r\n[4,] -0.0014479902  0.0367650907\r\n[5,]  1.0000000000 -0.0393849199\r\n[6,] -0.0393849199  1.0000000000\r\n\r\nThe correlation matrix follows the same order as that of the par vector. Let’s see the order of par again.\r\n\r\n\r\nsim$par\r\n\r\n\r\n  piA   piB  muA1  muA0  muB1 sigma \r\n  0.2   0.1   5.0   4.5   3.0   0.3 \r\n\r\nSo for example, the [1,2] entry of the matrix means that the correlation between piA and piB is -0.119. Like the hessian matrix, the correlation matrix is also symmetrical. The diagonal of the correlation matrix will always be 1 since the correlation between a variable and itself is 1.\r\n\r\n\r\n\r\n",
      "last_modified": "2021-11-28T16:10:53-05:00"
    }
  ],
  "collections": []
}
