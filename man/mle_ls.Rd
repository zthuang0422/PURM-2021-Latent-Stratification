% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ls_functions.R
\name{mle_ls}
\alias{mle_ls}
\title{Maximum Likeihood Estimate}
\usage{
mle_ls(data, start = NULL, starts = 1, vcv = "hessian", quiet = FALSE)
}
\arguments{
\item{data}{data frame containing cols y (positive outcome with zeros) and z (treatment).}

\item{start}{vector starting values for parameters c(piA, piB, muA1, muA0, muB1, sigma).}

\item{starts}{number of starting values.}

\item{vcv}{the variance-covariance matrix of the data, can be calculated using ls_vcv().}

\item{quiet}{boolean controlling if the computation time should be printed after execution.}
}
\value{
object containing the MLE results.
}
\description{
Computes the maximum likelihood estimate for the latent stratification model,
optionally takes starting values in original parameter space.
}
\details{
If starts=1, then the optimization is run once from the starting values.
If starts>1, then mle optimization is done with multiple starting values. \cr
The output is an object, which can be called using summary() to show the ATE parameters, their standard errors, and the maximum likelihood.
To access the variance-covariance matrix, use $vcv. \cr
For the input data frame, column z is the dummy variable for treatment. If z = 1, then the observation has received treatment.
If z = 0, then the observation has not received treatment. \cr
For the \empth{vcv} parameter: \cr
if vcv = "hessian" then the standard errors are computed by the numeric hessian \cr
if vcv = "score" then standard errors are computed from the gradient \cr
if vcv = "robust" then white robust standard errors are computed \cr
if vcv = "bootstrap" then the standard errors are computed by bootstrap \cr
The function uses L-BFGS-B method for optimization. According to RDocumentation, it is taken from Byrd et. al. (1995),
allowing box constraints with upper and lower bound. \cr
If quiet=TRUE, then the time to optimize and calculate the variance covariance matrix will be displayed along with the results.
}
\examples{
sim = sim_latent_strat(n=10000, piA=0.2, piB=0.1, muA1=5, muA0=4.5, muB1=3, sigma=0.3)
mle_ls(sim$data)

# if you wish to start the optimization in 3 places
mle_ls(sim$data, starts=3)

# if you wish to identify the starting values yourself
startv = c(0.2, 0.1, 5, 4.5, 3, 0.3)
mle_ls(sim$data, start=startv)

}
